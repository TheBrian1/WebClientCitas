@using System.IO
@using System.Net.Http.Json
@using System.Text;

@inject IToastService toast
@inject IAuthServices AuthenticationService

<EditForm Model="citas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container shadow-lg p-3 rb-5 bg-light border-dark col-md-8">
        <div class="card">
            <div class="card-header">
                <h3>Registro De Citas</h3>
            </div>
            <div class="card-body">
                <form>
                    @*Id Citas*@
                    <div class="form-group">
                        <label>Cita</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="citas.CitaId" class="form-control" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-secondary input-group-text oi oi-magnifying-glass" @onclick="Buscar"></button>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Dirección</label>
                        <InputText @bind-Value="citas.Nombres" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Dirección</label>
                        <InputText @bind-Value="citas.Apellidos" class="form-control" />
                    </div>


                    <div class="form-group">
                        <label>Dirección</label>
                        <InputText @bind-Value="citas.Telefono" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Dirección</label>
                        <InputText @bind-Value="citas.Descripcion" class="form-control" />
                    </div>


                    <div class="form-group">
                        <label>Dirección</label>
                        <InputText @bind-Value="citas.Direccion" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Fecha de la cita</label>
                        <input type="datetime-local" @bind="citas.Fecha_Cita" class="form-control" />
                    </div>

                </form>
            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-info oi oi-document" @onclick="Nuevo">Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success oi oi-cloud-upload"> Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger oi oi-trash" @onclick="Eliminar"> Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Citas citas = new Citas();

    public string Confirmar { get; set; }


    HttpClient client = new HttpClient();


    protected override void OnInitialized()
    {
        Nuevo();
    }

    private void Nuevo()
    {
        this.citas = new Citas();
        Confirmar = string.Empty;

    }

    private void Guardar()
    {

        citas.Username = AuthenticationService.users.Username;

        client = new HttpClient();
        client.BaseAddress = new Uri($"http://25.4.175.48:50101/api/Citas");

        var postTask = client.PostAsJsonAsync<Citas>("Citas", citas);
        postTask.Wait();

        var result = postTask.Result;

        if (result.IsSuccessStatusCode)
        {
            toast.ShowSuccess("Guardado correctamente");
            Nuevo();
        }
        else
            toast.ShowError("Guardado incorrecto");
    }

    private void Buscar()
    {
        client = new HttpClient();
        client.BaseAddress = new Uri($"http://25.4.175.48:50101/api/");

        var responseTask = client.GetAsync($"Citas/" + citas.CitaId);

        responseTask.Wait();

        var result = responseTask.Result;

        if (result.IsSuccessStatusCode)
        {
            var readTask = result.Content.ReadFromJsonAsync<Citas>();
            readTask.Wait();

            citas = readTask.Result;
            toast.ShowSuccess("Cita encontrada!!");
        }
        else
        {
            Nuevo();
            toast.ShowError("Cita no encontrada");
        }
    }

    private void Eliminar()
    {

        client = new HttpClient();
        client.BaseAddress = new Uri($"http://25.4.175.48:50101/api/");

        var deleteTask = client.DeleteAsync($"Citas/" + citas.CitaId);
        deleteTask.Wait();

        var result = deleteTask.Result;

        if (result.IsSuccessStatusCode)
        {
            toast.ShowSuccess("Eliminado correctamente");
            Nuevo();
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

}
